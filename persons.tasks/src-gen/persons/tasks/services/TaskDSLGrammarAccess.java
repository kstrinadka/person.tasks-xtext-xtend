/*
 * generated by Xtext 2.32.0
 */
package persons.tasks.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class TaskDSLGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class PlanningElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "persons.tasks.TaskDSL.Planning");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPlanningKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cAnonymousAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cAnonymousAnonymousKeyword_2_0 = (Keyword)cAnonymousAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cPersonsAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cPersonsPersonParserRuleCall_3_0_0 = (RuleCall)cPersonsAssignment_3_0.eContents().get(0);
		private final Assignment cTasksAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cTasksTaskParserRuleCall_3_1_0 = (RuleCall)cTasksAssignment_3_1.eContents().get(0);
		
		//// Что поменялось?
		//// добавляем анонимность по галочке (имена не сгенерируются, если флаг анонимности включен)
		//Planning:
		//    'Planning' name = ID
		//    (anonymous ?= 'anonymous')?    // ?= значит что DSL-объекти типа Boolean (включаем логику генерации по галочке)
		//    (persons += Person |
		//    tasks += Task)* //если не поставить звездочку, то только первая сущность сможет объявиться
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Planning' name = ID
		//(anonymous ?= 'anonymous')?    // ?= значит что DSL-объекти типа Boolean (включаем логику генерации по галочке)
		//(persons += Person |
		//tasks += Task)*
		public Group getGroup() { return cGroup; }
		
		//'Planning'
		public Keyword getPlanningKeyword_0() { return cPlanningKeyword_0; }
		
		//name = ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(anonymous ?= 'anonymous')?
		public Assignment getAnonymousAssignment_2() { return cAnonymousAssignment_2; }
		
		//'anonymous'
		public Keyword getAnonymousAnonymousKeyword_2_0() { return cAnonymousAnonymousKeyword_2_0; }
		
		//// ?= значит что DSL-объекти типа Boolean (включаем логику генерации по галочке)
		//(persons += Person |
		//tasks += Task)*
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//persons += Person
		public Assignment getPersonsAssignment_3_0() { return cPersonsAssignment_3_0; }
		
		//Person
		public RuleCall getPersonsPersonParserRuleCall_3_0_0() { return cPersonsPersonParserRuleCall_3_0_0; }
		
		//tasks += Task
		public Assignment getTasksAssignment_3_1() { return cTasksAssignment_3_1; }
		
		//Task
		public RuleCall getTasksTaskParserRuleCall_3_1_0() { return cTasksTaskParserRuleCall_3_1_0; }
	}
	public class PersonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "persons.tasks.TaskDSL.Person");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPersonKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Person:
		//    'Person:' name=ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Person:' name=ID
		public Group getGroup() { return cGroup; }
		
		//'Person:'
		public Keyword getPersonKeyword_0() { return cPersonKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class TaskElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "persons.tasks.TaskDSL.Task");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTaskKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cActionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cActionActionParserRuleCall_1_0 = (RuleCall)cActionAssignment_1.eContents().get(0);
		private final Keyword cPersonsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPersonsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cPersonsPersonCrossReference_3_0 = (CrossReference)cPersonsAssignment_3.eContents().get(0);
		private final RuleCall cPersonsPersonIDTerminalRuleCall_3_0_1 = (RuleCall)cPersonsPersonCrossReference_3_0.eContents().get(1);
		private final Keyword cPriorityKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cPrioAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cPrioINTTerminalRuleCall_5_0 = (RuleCall)cPrioAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cDurationKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cDurationAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cDurationDurationParserRuleCall_6_1_0 = (RuleCall)cDurationAssignment_6_1.eContents().get(0);
		
		//// для таски тоже можно имя задать, чтоб как для персоны?? (хотя у видов тасок есть различные ID и названия строк)
		//// Двоеточия теперь почему-то в терминальных символах
		//Task:
		//    'Task:' action = Action
		//    'persons:' persons += [Person]+
		//    'priority:' prio = INT
		//    ('duration:' duration = Duration)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Task:' action = Action
		//'persons:' persons += [Person]+
		//'priority:' prio = INT
		//('duration:' duration = Duration)?
		public Group getGroup() { return cGroup; }
		
		//'Task:'
		public Keyword getTaskKeyword_0() { return cTaskKeyword_0; }
		
		//action = Action
		public Assignment getActionAssignment_1() { return cActionAssignment_1; }
		
		//Action
		public RuleCall getActionActionParserRuleCall_1_0() { return cActionActionParserRuleCall_1_0; }
		
		//'persons:'
		public Keyword getPersonsKeyword_2() { return cPersonsKeyword_2; }
		
		//persons += [Person]+
		public Assignment getPersonsAssignment_3() { return cPersonsAssignment_3; }
		
		//[Person]
		public CrossReference getPersonsPersonCrossReference_3_0() { return cPersonsPersonCrossReference_3_0; }
		
		//ID
		public RuleCall getPersonsPersonIDTerminalRuleCall_3_0_1() { return cPersonsPersonIDTerminalRuleCall_3_0_1; }
		
		//'priority:'
		public Keyword getPriorityKeyword_4() { return cPriorityKeyword_4; }
		
		//prio = INT
		public Assignment getPrioAssignment_5() { return cPrioAssignment_5; }
		
		//INT
		public RuleCall getPrioINTTerminalRuleCall_5_0() { return cPrioINTTerminalRuleCall_5_0; }
		
		//('duration:' duration = Duration)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'duration:'
		public Keyword getDurationKeyword_6_0() { return cDurationKeyword_6_0; }
		
		//duration = Duration
		public Assignment getDurationAssignment_6_1() { return cDurationAssignment_6_1; }
		
		//Duration
		public RuleCall getDurationDurationParserRuleCall_6_1_0() { return cDurationDurationParserRuleCall_6_1_0; }
	}
	public class DurationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "persons.tasks.TaskDSL.Duration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDlAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDlINTTerminalRuleCall_0_0 = (RuleCall)cDlAssignment_0.eContents().get(0);
		private final Assignment cUnitAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cUnitTimeUnitEnumRuleCall_1_0 = (RuleCall)cUnitAssignment_1.eContents().get(0);
		
		//Duration:
		//    dl = INT unit = TimeUnit
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//dl = INT unit = TimeUnit
		public Group getGroup() { return cGroup; }
		
		//dl = INT
		public Assignment getDlAssignment_0() { return cDlAssignment_0; }
		
		//INT
		public RuleCall getDlINTTerminalRuleCall_0_0() { return cDlINTTerminalRuleCall_0_0; }
		
		//unit = TimeUnit
		public Assignment getUnitAssignment_1() { return cUnitAssignment_1; }
		
		//TimeUnit
		public RuleCall getUnitTimeUnitEnumRuleCall_1_0() { return cUnitTimeUnitEnumRuleCall_1_0; }
	}
	public class ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "persons.tasks.TaskDSL.Action");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLunchActionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMeetingActionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPaperActionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cPaymentActionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Action:
		//    LunchAction |
		//    MeetingAction |
		//    PaperAction |
		//    PaymentAction;
		@Override public ParserRule getRule() { return rule; }
		
		//LunchAction |
		//MeetingAction |
		//PaperAction |
		//PaymentAction
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LunchAction
		public RuleCall getLunchActionParserRuleCall_0() { return cLunchActionParserRuleCall_0; }
		
		//MeetingAction
		public RuleCall getMeetingActionParserRuleCall_1() { return cMeetingActionParserRuleCall_1; }
		
		//PaperAction
		public RuleCall getPaperActionParserRuleCall_2() { return cPaperActionParserRuleCall_2; }
		
		//PaymentAction
		public RuleCall getPaymentActionParserRuleCall_3() { return cPaymentActionParserRuleCall_3; }
	}
	public class LunchActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "persons.tasks.TaskDSL.LunchAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLunchKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLocationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLocationIDTerminalRuleCall_1_0 = (RuleCall)cLocationAssignment_1.eContents().get(0);
		
		//LunchAction:
		//    'Lunch' location = ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'Lunch' location = ID
		public Group getGroup() { return cGroup; }
		
		//'Lunch'
		public Keyword getLunchKeyword_0() { return cLunchKeyword_0; }
		
		//location = ID
		public Assignment getLocationAssignment_1() { return cLocationAssignment_1; }
		
		//ID
		public RuleCall getLocationIDTerminalRuleCall_1_0() { return cLocationIDTerminalRuleCall_1_0; }
	}
	public class MeetingActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "persons.tasks.TaskDSL.MeetingAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMeetingKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTopicAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTopicSTRINGTerminalRuleCall_1_0 = (RuleCall)cTopicAssignment_1.eContents().get(0);
		
		//MeetingAction:
		//    'Meeting' topic = STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'Meeting' topic = STRING
		public Group getGroup() { return cGroup; }
		
		//'Meeting'
		public Keyword getMeetingKeyword_0() { return cMeetingKeyword_0; }
		
		//topic = STRING
		public Assignment getTopicAssignment_1() { return cTopicAssignment_1; }
		
		//STRING
		public RuleCall getTopicSTRINGTerminalRuleCall_1_0() { return cTopicSTRINGTerminalRuleCall_1_0; }
	}
	public class PaperActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "persons.tasks.TaskDSL.PaperAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cReportAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cReportIDTerminalRuleCall_1_0 = (RuleCall)cReportAssignment_1.eContents().get(0);
		
		//PaperAction:
		//    'Report' report = ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'Report' report = ID
		public Group getGroup() { return cGroup; }
		
		//'Report'
		public Keyword getReportKeyword_0() { return cReportKeyword_0; }
		
		//report = ID
		public Assignment getReportAssignment_1() { return cReportAssignment_1; }
		
		//ID
		public RuleCall getReportIDTerminalRuleCall_1_0() { return cReportIDTerminalRuleCall_1_0; }
	}
	public class PaymentActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "persons.tasks.TaskDSL.PaymentAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPayKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAmountAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAmountIntExpressionParserRuleCall_1_0 = (RuleCall)cAmountAssignment_1.eContents().get(0);
		private final Keyword cEuroKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//PaymentAction:
		//    'Pay' amount = IntExpression 'euro';
		@Override public ParserRule getRule() { return rule; }
		
		//'Pay' amount = IntExpression 'euro'
		public Group getGroup() { return cGroup; }
		
		//'Pay'
		public Keyword getPayKeyword_0() { return cPayKeyword_0; }
		
		//amount = IntExpression
		public Assignment getAmountAssignment_1() { return cAmountAssignment_1; }
		
		//IntExpression
		public RuleCall getAmountIntExpressionParserRuleCall_1_0() { return cAmountIntExpressionParserRuleCall_1_0; }
		
		//'euro'
		public Keyword getEuroKeyword_2() { return cEuroKeyword_2; }
	}
	public class IntExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "persons.tasks.TaskDSL.IntExpression");
		private final RuleCall cExpressionLevel1ParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//IntExpression: ExpressionLevel1
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ExpressionLevel1
		public RuleCall getExpressionLevel1ParserRuleCall() { return cExpressionLevel1ParserRuleCall; }
	}
	public class ExpressionLevel1Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "persons.tasks.TaskDSL.ExpressionLevel1");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpressionLevel2ParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Action cExpressionAdditionLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cRightExpressionLevel2ParserRuleCall_1_0_2_0 = (RuleCall)cRightAssignment_1_0_2.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Action cExpressionSubtractionLeftAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cRightExpressionLevel2ParserRuleCall_1_1_2_0 = (RuleCall)cRightAssignment_1_1_2.eContents().get(0);
		
		//ExpressionLevel1 returns IntExpression: // Left associativity
		//    ExpressionLevel2
		//        ( ({ExpressionAddition.left =current} "+" right=ExpressionLevel2)
		//        | ({ExpressionSubtraction.left=current} "-" right=ExpressionLevel2)
		//        )*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//// Left associativity
		//   ExpressionLevel2
		//       ( ({ExpressionAddition.left =current} "+" right=ExpressionLevel2)
		//       | ({ExpressionSubtraction.left=current} "-" right=ExpressionLevel2)
		//       )*
		public Group getGroup() { return cGroup; }
		
		//// Left associativity
		//   ExpressionLevel2
		public RuleCall getExpressionLevel2ParserRuleCall_0() { return cExpressionLevel2ParserRuleCall_0; }
		
		//( ({ExpressionAddition.left =current} "+" right=ExpressionLevel2)
		//| ({ExpressionSubtraction.left=current} "-" right=ExpressionLevel2)
		//)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//({ExpressionAddition.left =current} "+" right=ExpressionLevel2)
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{ExpressionAddition.left =current}
		public Action getExpressionAdditionLeftAction_1_0_0() { return cExpressionAdditionLeftAction_1_0_0; }
		
		//"+"
		public Keyword getPlusSignKeyword_1_0_1() { return cPlusSignKeyword_1_0_1; }
		
		//right=ExpressionLevel2
		public Assignment getRightAssignment_1_0_2() { return cRightAssignment_1_0_2; }
		
		//ExpressionLevel2
		public RuleCall getRightExpressionLevel2ParserRuleCall_1_0_2_0() { return cRightExpressionLevel2ParserRuleCall_1_0_2_0; }
		
		//({ExpressionSubtraction.left=current} "-" right=ExpressionLevel2)
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//{ExpressionSubtraction.left=current}
		public Action getExpressionSubtractionLeftAction_1_1_0() { return cExpressionSubtractionLeftAction_1_1_0; }
		
		//"-"
		public Keyword getHyphenMinusKeyword_1_1_1() { return cHyphenMinusKeyword_1_1_1; }
		
		//right=ExpressionLevel2
		public Assignment getRightAssignment_1_1_2() { return cRightAssignment_1_1_2; }
		
		//ExpressionLevel2
		public RuleCall getRightExpressionLevel2ParserRuleCall_1_1_2_0() { return cRightExpressionLevel2ParserRuleCall_1_1_2_0; }
	}
	public class ExpressionLevel2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "persons.tasks.TaskDSL.ExpressionLevel2");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpressionLevel3ParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Action cExpressionMultiplyLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cRightExpressionLevel3ParserRuleCall_1_0_2_0 = (RuleCall)cRightAssignment_1_0_2.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Action cExpressionDivisionLeftAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final Keyword cSolidusKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cRightExpressionLevel3ParserRuleCall_1_1_2_0 = (RuleCall)cRightAssignment_1_1_2.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Action cExpressionMaximumLeftAction_1_2_0 = (Action)cGroup_1_2.eContents().get(0);
		private final Keyword cMaxKeyword_1_2_1 = (Keyword)cGroup_1_2.eContents().get(1);
		private final Assignment cRightAssignment_1_2_2 = (Assignment)cGroup_1_2.eContents().get(2);
		private final RuleCall cRightExpressionLevel3ParserRuleCall_1_2_2_0 = (RuleCall)cRightAssignment_1_2_2.eContents().get(0);
		private final Group cGroup_1_3 = (Group)cAlternatives_1.eContents().get(3);
		private final Action cExpressionMinimumLeftAction_1_3_0 = (Action)cGroup_1_3.eContents().get(0);
		private final Keyword cMinKeyword_1_3_1 = (Keyword)cGroup_1_3.eContents().get(1);
		private final Assignment cRightAssignment_1_3_2 = (Assignment)cGroup_1_3.eContents().get(2);
		private final RuleCall cRightExpressionLevel3ParserRuleCall_1_3_2_0 = (RuleCall)cRightAssignment_1_3_2.eContents().get(0);
		private final Group cGroup_1_4 = (Group)cAlternatives_1.eContents().get(4);
		private final Action cExpressionModuloLeftAction_1_4_0 = (Action)cGroup_1_4.eContents().get(0);
		private final Keyword cModKeyword_1_4_1 = (Keyword)cGroup_1_4.eContents().get(1);
		private final Assignment cRightAssignment_1_4_2 = (Assignment)cGroup_1_4.eContents().get(2);
		private final RuleCall cRightExpressionLevel3ParserRuleCall_1_4_2_0 = (RuleCall)cRightAssignment_1_4_2.eContents().get(0);
		
		//ExpressionLevel2 returns IntExpression: // Left associativity
		//    ExpressionLevel3
		//        ( ({ExpressionMultiply.left=current} "*" right=ExpressionLevel3)
		//        | ({ExpressionDivision.left=current} "/" right=ExpressionLevel3)
		//        | ({ExpressionMaximum.left =current} "max" right=ExpressionLevel3)
		//        | ({ExpressionMinimum.left =current} "min" right=ExpressionLevel3)
		//        | ({ExpressionModulo.left =current} "mod" right=ExpressionLevel3)
		//    )*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//// Left associativity
		//   ExpressionLevel3
		//       ( ({ExpressionMultiply.left=current} "*" right=ExpressionLevel3)
		//       | ({ExpressionDivision.left=current} "/" right=ExpressionLevel3)
		//       | ({ExpressionMaximum.left =current} "max" right=ExpressionLevel3)
		//       | ({ExpressionMinimum.left =current} "min" right=ExpressionLevel3)
		//       | ({ExpressionModulo.left =current} "mod" right=ExpressionLevel3)
		//   )*
		public Group getGroup() { return cGroup; }
		
		//// Left associativity
		//   ExpressionLevel3
		public RuleCall getExpressionLevel3ParserRuleCall_0() { return cExpressionLevel3ParserRuleCall_0; }
		
		//    ( ({ExpressionMultiply.left=current} "*" right=ExpressionLevel3)
		//    | ({ExpressionDivision.left=current} "/" right=ExpressionLevel3)
		//    | ({ExpressionMaximum.left =current} "max" right=ExpressionLevel3)
		//    | ({ExpressionMinimum.left =current} "min" right=ExpressionLevel3)
		//    | ({ExpressionModulo.left =current} "mod" right=ExpressionLevel3)
		//)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//({ExpressionMultiply.left=current} "*" right=ExpressionLevel3)
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{ExpressionMultiply.left=current}
		public Action getExpressionMultiplyLeftAction_1_0_0() { return cExpressionMultiplyLeftAction_1_0_0; }
		
		//"*"
		public Keyword getAsteriskKeyword_1_0_1() { return cAsteriskKeyword_1_0_1; }
		
		//right=ExpressionLevel3
		public Assignment getRightAssignment_1_0_2() { return cRightAssignment_1_0_2; }
		
		//ExpressionLevel3
		public RuleCall getRightExpressionLevel3ParserRuleCall_1_0_2_0() { return cRightExpressionLevel3ParserRuleCall_1_0_2_0; }
		
		//({ExpressionDivision.left=current} "/" right=ExpressionLevel3)
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//{ExpressionDivision.left=current}
		public Action getExpressionDivisionLeftAction_1_1_0() { return cExpressionDivisionLeftAction_1_1_0; }
		
		//"/"
		public Keyword getSolidusKeyword_1_1_1() { return cSolidusKeyword_1_1_1; }
		
		//right=ExpressionLevel3
		public Assignment getRightAssignment_1_1_2() { return cRightAssignment_1_1_2; }
		
		//ExpressionLevel3
		public RuleCall getRightExpressionLevel3ParserRuleCall_1_1_2_0() { return cRightExpressionLevel3ParserRuleCall_1_1_2_0; }
		
		//({ExpressionMaximum.left =current} "max" right=ExpressionLevel3)
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//{ExpressionMaximum.left =current}
		public Action getExpressionMaximumLeftAction_1_2_0() { return cExpressionMaximumLeftAction_1_2_0; }
		
		//"max"
		public Keyword getMaxKeyword_1_2_1() { return cMaxKeyword_1_2_1; }
		
		//right=ExpressionLevel3
		public Assignment getRightAssignment_1_2_2() { return cRightAssignment_1_2_2; }
		
		//ExpressionLevel3
		public RuleCall getRightExpressionLevel3ParserRuleCall_1_2_2_0() { return cRightExpressionLevel3ParserRuleCall_1_2_2_0; }
		
		//({ExpressionMinimum.left =current} "min" right=ExpressionLevel3)
		public Group getGroup_1_3() { return cGroup_1_3; }
		
		//{ExpressionMinimum.left =current}
		public Action getExpressionMinimumLeftAction_1_3_0() { return cExpressionMinimumLeftAction_1_3_0; }
		
		//"min"
		public Keyword getMinKeyword_1_3_1() { return cMinKeyword_1_3_1; }
		
		//right=ExpressionLevel3
		public Assignment getRightAssignment_1_3_2() { return cRightAssignment_1_3_2; }
		
		//ExpressionLevel3
		public RuleCall getRightExpressionLevel3ParserRuleCall_1_3_2_0() { return cRightExpressionLevel3ParserRuleCall_1_3_2_0; }
		
		//({ExpressionModulo.left =current} "mod" right=ExpressionLevel3)
		public Group getGroup_1_4() { return cGroup_1_4; }
		
		//{ExpressionModulo.left =current}
		public Action getExpressionModuloLeftAction_1_4_0() { return cExpressionModuloLeftAction_1_4_0; }
		
		//"mod"
		public Keyword getModKeyword_1_4_1() { return cModKeyword_1_4_1; }
		
		//right=ExpressionLevel3
		public Assignment getRightAssignment_1_4_2() { return cRightAssignment_1_4_2; }
		
		//ExpressionLevel3
		public RuleCall getRightExpressionLevel3ParserRuleCall_1_4_2_0() { return cRightExpressionLevel3ParserRuleCall_1_4_2_0; }
	}
	public class ExpressionLevel3Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "persons.tasks.TaskDSL.ExpressionLevel3");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpressionLevel4ParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cExpressionPowerLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cCircumflexAccentKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExpressionLevel3ParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//ExpressionLevel3 returns IntExpression: // Right associativity
		//    ExpressionLevel4
		//        ( ({ExpressionPower.left=current} "^" right=ExpressionLevel3))?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//// Right associativity
		//   ExpressionLevel4
		//       ( ({ExpressionPower.left=current} "^" right=ExpressionLevel3))?
		public Group getGroup() { return cGroup; }
		
		//// Right associativity
		//   ExpressionLevel4
		public RuleCall getExpressionLevel4ParserRuleCall_0() { return cExpressionLevel4ParserRuleCall_0; }
		
		//( ({ExpressionPower.left=current} "^" right=ExpressionLevel3))?
		public Group getGroup_1() { return cGroup_1; }
		
		//{ExpressionPower.left=current}
		public Action getExpressionPowerLeftAction_1_0() { return cExpressionPowerLeftAction_1_0; }
		
		//"^"
		public Keyword getCircumflexAccentKeyword_1_1() { return cCircumflexAccentKeyword_1_1; }
		
		//right=ExpressionLevel3
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//ExpressionLevel3
		public RuleCall getRightExpressionLevel3ParserRuleCall_1_2_0() { return cRightExpressionLevel3ParserRuleCall_1_2_0; }
	}
	public class ExpressionLevel4Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "persons.tasks.TaskDSL.ExpressionLevel4");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExpressionMinusParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cExpressionPlusParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cExpressionLevel5ParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//ExpressionLevel4 returns IntExpression:
		//    ExpressionMinus | ExpressionPlus | ExpressionLevel5
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ExpressionMinus | ExpressionPlus | ExpressionLevel5
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ExpressionMinus
		public RuleCall getExpressionMinusParserRuleCall_0() { return cExpressionMinusParserRuleCall_0; }
		
		//ExpressionPlus
		public RuleCall getExpressionPlusParserRuleCall_1() { return cExpressionPlusParserRuleCall_1; }
		
		//ExpressionLevel5
		public RuleCall getExpressionLevel5ParserRuleCall_2() { return cExpressionLevel5ParserRuleCall_2; }
	}
	public class ExpressionMinusElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "persons.tasks.TaskDSL.ExpressionMinus");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSubAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSubExpressionLevel5ParserRuleCall_1_0 = (RuleCall)cSubAssignment_1.eContents().get(0);
		
		//ExpressionMinus:
		//    "-" sub=ExpressionLevel5
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"-" sub=ExpressionLevel5
		public Group getGroup() { return cGroup; }
		
		//"-"
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//sub=ExpressionLevel5
		public Assignment getSubAssignment_1() { return cSubAssignment_1; }
		
		//ExpressionLevel5
		public RuleCall getSubExpressionLevel5ParserRuleCall_1_0() { return cSubExpressionLevel5ParserRuleCall_1_0; }
	}
	public class ExpressionPlusElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "persons.tasks.TaskDSL.ExpressionPlus");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPlusSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSubAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSubExpressionLevel5ParserRuleCall_1_0 = (RuleCall)cSubAssignment_1.eContents().get(0);
		
		//ExpressionPlus:
		//    "+" sub=ExpressionLevel5
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"+" sub=ExpressionLevel5
		public Group getGroup() { return cGroup; }
		
		//"+"
		public Keyword getPlusSignKeyword_0() { return cPlusSignKeyword_0; }
		
		//sub=ExpressionLevel5
		public Assignment getSubAssignment_1() { return cSubAssignment_1; }
		
		//ExpressionLevel5
		public RuleCall getSubExpressionLevel5ParserRuleCall_1_0() { return cSubExpressionLevel5ParserRuleCall_1_0; }
	}
	public class ExpressionLevel5Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "persons.tasks.TaskDSL.ExpressionLevel5");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExpressionBracketParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cExpressionConstantIntParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cExpressionBalanceParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//ExpressionLevel5 returns IntExpression:
		//    ExpressionBracket |
		//    ExpressionConstantInt |
		//    ExpressionBalance
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ExpressionBracket |
		//ExpressionConstantInt |
		//ExpressionBalance
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ExpressionBracket
		public RuleCall getExpressionBracketParserRuleCall_0() { return cExpressionBracketParserRuleCall_0; }
		
		//ExpressionConstantInt
		public RuleCall getExpressionConstantIntParserRuleCall_1() { return cExpressionConstantIntParserRuleCall_1; }
		
		//ExpressionBalance
		public RuleCall getExpressionBalanceParserRuleCall_2() { return cExpressionBalanceParserRuleCall_2; }
	}
	public class ExpressionBracketElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "persons.tasks.TaskDSL.ExpressionBracket");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSubAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSubIntExpressionParserRuleCall_1_0 = (RuleCall)cSubAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ExpressionBracket:
		//    "(" sub=IntExpression ")"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"(" sub=IntExpression ")"
		public Group getGroup() { return cGroup; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//sub=IntExpression
		public Assignment getSubAssignment_1() { return cSubAssignment_1; }
		
		//IntExpression
		public RuleCall getSubIntExpressionParserRuleCall_1_0() { return cSubIntExpressionParserRuleCall_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class ExpressionConstantIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "persons.tasks.TaskDSL.ExpressionConstantInt");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//ExpressionConstantInt:
		//    value=INT
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//value=INT
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0() { return cValueINTTerminalRuleCall_0; }
	}
	public class ExpressionBalanceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "persons.tasks.TaskDSL.ExpressionBalance");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueBalanceEnumRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//ExpressionBalance:
		//    value=Balance
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//value=Balance
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//Balance
		public RuleCall getValueBalanceEnumRuleCall_0() { return cValueBalanceEnumRuleCall_0; }
	}
	
	public class TimeUnitElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "persons.tasks.TaskDSL.TimeUnit");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cMINUTEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cMINUTEMinKeyword_0_0 = (Keyword)cMINUTEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cHOUREnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cHOURHourKeyword_1_0 = (Keyword)cHOUREnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cDAYEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cDAYDayKeyword_2_0 = (Keyword)cDAYEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cWEEKEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cWEEKWeekKeyword_3_0 = (Keyword)cWEEKEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum TimeUnit:
		//    MINUTE = 'min' |
		//    HOUR = 'hour' |
		//    DAY = 'day' |
		//    WEEK = 'week';
		public EnumRule getRule() { return rule; }
		
		//MINUTE = 'min' |
		//HOUR = 'hour' |
		//DAY = 'day' |
		//WEEK = 'week'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//MINUTE = 'min'
		public EnumLiteralDeclaration getMINUTEEnumLiteralDeclaration_0() { return cMINUTEEnumLiteralDeclaration_0; }
		
		//'min'
		public Keyword getMINUTEMinKeyword_0_0() { return cMINUTEMinKeyword_0_0; }
		
		//HOUR = 'hour'
		public EnumLiteralDeclaration getHOUREnumLiteralDeclaration_1() { return cHOUREnumLiteralDeclaration_1; }
		
		//'hour'
		public Keyword getHOURHourKeyword_1_0() { return cHOURHourKeyword_1_0; }
		
		//DAY = 'day'
		public EnumLiteralDeclaration getDAYEnumLiteralDeclaration_2() { return cDAYEnumLiteralDeclaration_2; }
		
		//'day'
		public Keyword getDAYDayKeyword_2_0() { return cDAYDayKeyword_2_0; }
		
		//WEEK = 'week'
		public EnumLiteralDeclaration getWEEKEnumLiteralDeclaration_3() { return cWEEKEnumLiteralDeclaration_3; }
		
		//'week'
		public Keyword getWEEKWeekKeyword_3_0() { return cWEEKWeekKeyword_3_0; }
	}
	public class BalanceElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "persons.tasks.TaskDSL.Balance");
		private final EnumLiteralDeclaration cBALANCEEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cBALANCEBalanceKeyword_0 = (Keyword)cBALANCEEnumLiteralDeclaration.eContents().get(0);
		
		//enum Balance:
		//    BALANCE = 'balance'
		//;
		public EnumRule getRule() { return rule; }
		
		//BALANCE = 'balance'
		public EnumLiteralDeclaration getBALANCEEnumLiteralDeclaration() { return cBALANCEEnumLiteralDeclaration; }
		
		//'balance'
		public Keyword getBALANCEBalanceKeyword_0() { return cBALANCEBalanceKeyword_0; }
	}
	
	private final PlanningElements pPlanning;
	private final PersonElements pPerson;
	private final TaskElements pTask;
	private final DurationElements pDuration;
	private final ActionElements pAction;
	private final LunchActionElements pLunchAction;
	private final MeetingActionElements pMeetingAction;
	private final PaperActionElements pPaperAction;
	private final PaymentActionElements pPaymentAction;
	private final TimeUnitElements eTimeUnit;
	private final IntExpressionElements pIntExpression;
	private final ExpressionLevel1Elements pExpressionLevel1;
	private final ExpressionLevel2Elements pExpressionLevel2;
	private final ExpressionLevel3Elements pExpressionLevel3;
	private final ExpressionLevel4Elements pExpressionLevel4;
	private final ExpressionMinusElements pExpressionMinus;
	private final ExpressionPlusElements pExpressionPlus;
	private final ExpressionLevel5Elements pExpressionLevel5;
	private final ExpressionBracketElements pExpressionBracket;
	private final ExpressionConstantIntElements pExpressionConstantInt;
	private final ExpressionBalanceElements pExpressionBalance;
	private final BalanceElements eBalance;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public TaskDSLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pPlanning = new PlanningElements();
		this.pPerson = new PersonElements();
		this.pTask = new TaskElements();
		this.pDuration = new DurationElements();
		this.pAction = new ActionElements();
		this.pLunchAction = new LunchActionElements();
		this.pMeetingAction = new MeetingActionElements();
		this.pPaperAction = new PaperActionElements();
		this.pPaymentAction = new PaymentActionElements();
		this.eTimeUnit = new TimeUnitElements();
		this.pIntExpression = new IntExpressionElements();
		this.pExpressionLevel1 = new ExpressionLevel1Elements();
		this.pExpressionLevel2 = new ExpressionLevel2Elements();
		this.pExpressionLevel3 = new ExpressionLevel3Elements();
		this.pExpressionLevel4 = new ExpressionLevel4Elements();
		this.pExpressionMinus = new ExpressionMinusElements();
		this.pExpressionPlus = new ExpressionPlusElements();
		this.pExpressionLevel5 = new ExpressionLevel5Elements();
		this.pExpressionBracket = new ExpressionBracketElements();
		this.pExpressionConstantInt = new ExpressionConstantIntElements();
		this.pExpressionBalance = new ExpressionBalanceElements();
		this.eBalance = new BalanceElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("persons.tasks.TaskDSL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//// Что поменялось?
	//// добавляем анонимность по галочке (имена не сгенерируются, если флаг анонимности включен)
	//Planning:
	//    'Planning' name = ID
	//    (anonymous ?= 'anonymous')?    // ?= значит что DSL-объекти типа Boolean (включаем логику генерации по галочке)
	//    (persons += Person |
	//    tasks += Task)* //если не поставить звездочку, то только первая сущность сможет объявиться
	//;
	public PlanningElements getPlanningAccess() {
		return pPlanning;
	}
	
	public ParserRule getPlanningRule() {
		return getPlanningAccess().getRule();
	}
	
	//Person:
	//    'Person:' name=ID
	//;
	public PersonElements getPersonAccess() {
		return pPerson;
	}
	
	public ParserRule getPersonRule() {
		return getPersonAccess().getRule();
	}
	
	//// для таски тоже можно имя задать, чтоб как для персоны?? (хотя у видов тасок есть различные ID и названия строк)
	//// Двоеточия теперь почему-то в терминальных символах
	//Task:
	//    'Task:' action = Action
	//    'persons:' persons += [Person]+
	//    'priority:' prio = INT
	//    ('duration:' duration = Duration)?
	//;
	public TaskElements getTaskAccess() {
		return pTask;
	}
	
	public ParserRule getTaskRule() {
		return getTaskAccess().getRule();
	}
	
	//Duration:
	//    dl = INT unit = TimeUnit
	//;
	public DurationElements getDurationAccess() {
		return pDuration;
	}
	
	public ParserRule getDurationRule() {
		return getDurationAccess().getRule();
	}
	
	//Action:
	//    LunchAction |
	//    MeetingAction |
	//    PaperAction |
	//    PaymentAction;
	public ActionElements getActionAccess() {
		return pAction;
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}
	
	//LunchAction:
	//    'Lunch' location = ID;
	public LunchActionElements getLunchActionAccess() {
		return pLunchAction;
	}
	
	public ParserRule getLunchActionRule() {
		return getLunchActionAccess().getRule();
	}
	
	//MeetingAction:
	//    'Meeting' topic = STRING;
	public MeetingActionElements getMeetingActionAccess() {
		return pMeetingAction;
	}
	
	public ParserRule getMeetingActionRule() {
		return getMeetingActionAccess().getRule();
	}
	
	//PaperAction:
	//    'Report' report = ID;
	public PaperActionElements getPaperActionAccess() {
		return pPaperAction;
	}
	
	public ParserRule getPaperActionRule() {
		return getPaperActionAccess().getRule();
	}
	
	//PaymentAction:
	//    'Pay' amount = IntExpression 'euro';
	public PaymentActionElements getPaymentActionAccess() {
		return pPaymentAction;
	}
	
	public ParserRule getPaymentActionRule() {
		return getPaymentActionAccess().getRule();
	}
	
	//enum TimeUnit:
	//    MINUTE = 'min' |
	//    HOUR = 'hour' |
	//    DAY = 'day' |
	//    WEEK = 'week';
	public TimeUnitElements getTimeUnitAccess() {
		return eTimeUnit;
	}
	
	public EnumRule getTimeUnitRule() {
		return getTimeUnitAccess().getRule();
	}
	
	//IntExpression: ExpressionLevel1
	//;
	public IntExpressionElements getIntExpressionAccess() {
		return pIntExpression;
	}
	
	public ParserRule getIntExpressionRule() {
		return getIntExpressionAccess().getRule();
	}
	
	//ExpressionLevel1 returns IntExpression: // Left associativity
	//    ExpressionLevel2
	//        ( ({ExpressionAddition.left =current} "+" right=ExpressionLevel2)
	//        | ({ExpressionSubtraction.left=current} "-" right=ExpressionLevel2)
	//        )*
	//;
	public ExpressionLevel1Elements getExpressionLevel1Access() {
		return pExpressionLevel1;
	}
	
	public ParserRule getExpressionLevel1Rule() {
		return getExpressionLevel1Access().getRule();
	}
	
	//ExpressionLevel2 returns IntExpression: // Left associativity
	//    ExpressionLevel3
	//        ( ({ExpressionMultiply.left=current} "*" right=ExpressionLevel3)
	//        | ({ExpressionDivision.left=current} "/" right=ExpressionLevel3)
	//        | ({ExpressionMaximum.left =current} "max" right=ExpressionLevel3)
	//        | ({ExpressionMinimum.left =current} "min" right=ExpressionLevel3)
	//        | ({ExpressionModulo.left =current} "mod" right=ExpressionLevel3)
	//    )*
	//;
	public ExpressionLevel2Elements getExpressionLevel2Access() {
		return pExpressionLevel2;
	}
	
	public ParserRule getExpressionLevel2Rule() {
		return getExpressionLevel2Access().getRule();
	}
	
	//ExpressionLevel3 returns IntExpression: // Right associativity
	//    ExpressionLevel4
	//        ( ({ExpressionPower.left=current} "^" right=ExpressionLevel3))?
	//;
	public ExpressionLevel3Elements getExpressionLevel3Access() {
		return pExpressionLevel3;
	}
	
	public ParserRule getExpressionLevel3Rule() {
		return getExpressionLevel3Access().getRule();
	}
	
	//ExpressionLevel4 returns IntExpression:
	//    ExpressionMinus | ExpressionPlus | ExpressionLevel5
	//;
	public ExpressionLevel4Elements getExpressionLevel4Access() {
		return pExpressionLevel4;
	}
	
	public ParserRule getExpressionLevel4Rule() {
		return getExpressionLevel4Access().getRule();
	}
	
	//ExpressionMinus:
	//    "-" sub=ExpressionLevel5
	//;
	public ExpressionMinusElements getExpressionMinusAccess() {
		return pExpressionMinus;
	}
	
	public ParserRule getExpressionMinusRule() {
		return getExpressionMinusAccess().getRule();
	}
	
	//ExpressionPlus:
	//    "+" sub=ExpressionLevel5
	//;
	public ExpressionPlusElements getExpressionPlusAccess() {
		return pExpressionPlus;
	}
	
	public ParserRule getExpressionPlusRule() {
		return getExpressionPlusAccess().getRule();
	}
	
	//ExpressionLevel5 returns IntExpression:
	//    ExpressionBracket |
	//    ExpressionConstantInt |
	//    ExpressionBalance
	//;
	public ExpressionLevel5Elements getExpressionLevel5Access() {
		return pExpressionLevel5;
	}
	
	public ParserRule getExpressionLevel5Rule() {
		return getExpressionLevel5Access().getRule();
	}
	
	//ExpressionBracket:
	//    "(" sub=IntExpression ")"
	//;
	public ExpressionBracketElements getExpressionBracketAccess() {
		return pExpressionBracket;
	}
	
	public ParserRule getExpressionBracketRule() {
		return getExpressionBracketAccess().getRule();
	}
	
	//ExpressionConstantInt:
	//    value=INT
	//;
	public ExpressionConstantIntElements getExpressionConstantIntAccess() {
		return pExpressionConstantInt;
	}
	
	public ParserRule getExpressionConstantIntRule() {
		return getExpressionConstantIntAccess().getRule();
	}
	
	//ExpressionBalance:
	//    value=Balance
	//;
	public ExpressionBalanceElements getExpressionBalanceAccess() {
		return pExpressionBalance;
	}
	
	public ParserRule getExpressionBalanceRule() {
		return getExpressionBalanceAccess().getRule();
	}
	
	//enum Balance:
	//    BALANCE = 'balance'
	//;
	public BalanceElements getBalanceAccess() {
		return eBalance;
	}
	
	public EnumRule getBalanceRule() {
		return getBalanceAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
